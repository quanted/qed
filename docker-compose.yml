version: '2.1'
volumes:
  collected_static:
services:

  # QED Django front-end
  qed_django:
    restart: unless-stopped
    image: dbsmith88/qed_django:dev  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "8080"
    volumes:
      - collected_static:/src/collected_static
      - .:/src
      - /var/www/app_data:/src/app-data
    environment:
      - REDIS_HOSTNAME=redis
      #these echo in the environmental variable to the running docker container
      #so that is can be picked up by the django settings 
      - DOCKER_HOSTNAME=${HOSTNAME}
      #- DOCKER_SECRET_KEY=${SECRET_KEY}
      - HMS_RELEASE=${HMS_RELASE:-0}
      - IN_PROD=${IN_PROD:-0}
      - HMS_AQUATOX_WEBAPP=False
    links:
      - redis
      - mongodb

  # Redis (message broker)
  redis:
    restart: unless-stopped
    image: redis:latest
    hostname: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis.config:/usr/local/etc/redis/redis.conf
    expose:
      - "6379"

  # ubertool_cts nodejs submodule
  cts_nodejs:
    restart: unless-stopped
    build: ./cts_nodejs
    # image: quanted/cts_nodejs
    image: ghcr.io/quanted/cts-nodejs:dev
    expose:
      - "4000"
    environment:
      - NODEJS_HOST=cts_nodejs
      - NODEJS_PORT=4000
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
    links:
      - redis
    volumes:
      - ./cts_nodejs:/src

  # # Celery worker - manager calc
  worker_manager:
    restart: unless-stopped
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
    # image: quanted/cts_celery
    image: ghcr.io/quanted/cts-celery:dev
    command: celery -A tasks worker -Q manager_queue -l info -n manager_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    # volumes:
    #   - ./cts_celery:/src

  # # Celery worker - cts calc
  worker_cts:
    restart: unless-stopped
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
    # image: quanted/cts_celery
    image: ghcr.io/quanted/cts-celery:dev
    command: celery -A tasks worker -Q cts_queue -l info -n cts_worker -c 2
    links:
      - redis
      - qed_django
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    volumes:
      - ./cts_celery:/src

  qed_nginx:
    restart: unless-stopped
    build: ./qed_nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - qed_django:uwsgi_django  # Nginx.conf can reference "qed_django" service with the hostname 'uwsgi' or 'qed_django'
      - cts_nodejs:cts_nodejs
      - qed_flask:qed_flask
      - cyan-api:uwsgi_flask
    volumes:
      - /var/www/nginx/certs:/etc/nginx/qed # this points to the keys directory
      - /etc/letsencrypt:/etc/letsencrypt  # certs from letsencrypt (uses certbot)
    volumes_from:
      - qed_django  # Mount all volumes from "qed_django" to NGINX, so it can access the collected static files

  # flask_qed Flask back-end
  qed_flask:
    restart: unless-stopped
    image: dbsmith88/flask_qed:latest  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "7777"
    links:
      - redis
      - mongodb
      - qed_celery
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    volumes:
      - ./flask_qed:/src
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - /var/www/samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results
      - /var/www/qed-basins:/src/hms_flask/data/qed-basins
      - collected_static:/src/collected_static
      - /var/www/app_data/hms:/src/hms-data
    depends_on:
      - mongodb
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  # mongoDB database container
  mongodb:
    restart: unless-stopped
    image: mongo:latest
    volumes:
      - /var/www/mongodb:/data/db
    expose:
      - "27017"

  # Celery container for async task execution
  qed_celery:
    restart: unless-stopped
    image: dbsmith88/flask_qed:latest
    volumes:
      - ./flask_qed:/src
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - "../samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results"
      - "../qed-basins:/src/hms_flask/data/qed-basins"
      - collected_static:/src/collected_static
      - /var/www/app_data/hms:/src/hms-data
    links:
      - redis
      - mongodb
    command: conda run -n pyenv --no-capture-output celery -A celery_cgi worker -Q qed --loglevel=INFO -n qed_worker --uid=daemon
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
      - DASK_SCHEDULER=dask_scheduler:8786
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  hms_dotnetcore:
    restart: unless-stopped
    image: ghcr.io/quanted/hms:dev
    environment:
      - MONGODB=mongodb
      - FLASK_SERVER=http://qed_nginx:7777
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    expose:
     - "80"
    volumes:
      #- "./windows/hms/Web.Services/App_Data:/app/App_Data"
      - /var/www/app_data/hms:/app/App_Data

  # Dask Containers
  dask_scheduler:
    restart: unless-stopped
    image: dbsmith88/qed-dask:dev-np
    hostname: dask-scheduler
    expose:
     - 8786
     - 8787
    command: ["conda", "run", "-n", "pyenv", "--no-capture-output", "dask-scheduler"]

  dask_worker:
    restart: unless-stopped
    image: dbsmith88/qed-dask:dev-np
    hostname: dask-worker
    command: ["conda", "run", "-n", "pyenv", "--no-capture-output", "dask-worker", "dask_scheduler:8786"]
    environment:
      PYTHONPATH: '/src:/src/qed:/src/qed/flask_qed'
      IN_DOCKER: "True"
      HMS_BACKEND_SERVER_INTERNAL: "http://hms_dotnetcore:8080/"
      HMS_WORKFLOW_BACKEND: "https://ceamstg.ceeopdev.net/hms/rest/"
      HMS_BACKEND: "http://hms_dotnetcore:8080/"
    volumes:
       - "../qed:/src/qed"

  # CTSWS Apache Tomcat container
  ctsws:
    restart: unless-stopped
    image: ${CTSWS_IMAGE:-ghcr.io/quanted/ctsws:docker-28b9ed15dc6f4724f56c71c1c5f77a246e70a5e4}
    expose:
      - "8080"
#     ports:
#       - "8087:8080"
    environment:
      - JAVA_OPTS=-Xmx1g
      - LOG4J_FORMAT_MSG_NO_LOOKUPS=true
      - CTSWS_SERVER_USERNAME=${CTSWS_SERVER_USERNAME}
      - CTSWS_SERVER_PASSWORD=${CTSWS_SERVER_PASSWORD}
    volumes:
      - ./secrets/tomcat/chemaxon/licenses/license.cxl:/root/.chemaxon/licenses/license.cxl

  # Jchem Webservices (legacy)
  jchemws:
    restart: unless-stopped
    image: ${JCHEMWS_IMAGE:-ghcr.io/quanted/jchemws:main-6ae2e9561c201bb83350c8091171ed74ae9f4ed0}
    expose:
      - "8080"
#     ports:
#       - "8086:8080"
    environment:
      - JAVA_OPTS=-Xmx1500m -Djava.awt.headless=true
      - LOG4J_FORMAT_MSG_NO_LOOKUPS=true
    volumes:
      - ./secrets/tomcat/chemaxon/licenses/license.cxl:/home/tomcat/.chemaxon/licenses/license.cxl

  pisces-db:
    restart: unless-stopped
    image: mdillon/postgis
    expose:
      - "5432"
    volumes:
      - /var/www/pisces:/docker-entrypoint-initdb.d

  # Cyanweb Flask API
  cyan-api:
    restart: unless-stopped
    image: ghcr.io/usepa/cyanweb-api:dev
    expose:
      - "5001"
    depends_on:
      - cyan-db
    volumes:
      - ./EPA-Cyano-Web/config/secrets:/config/secrets
    environment:
      - DOCKER_HOSTNAME=${HOSTNAME}
    links:
      - cyan-db
    env_file:
      - ${CYAN_CONFIG:-./EPA-Cyano-Web/config/.env}

  # Cyanweb Celery Worker
  cyan-celery:
    restart: unless-stopped
    image: ghcr.io/usepa/cyanweb-api:dev
    command: celery -A celery_worker.celery worker --loglevel=INFO -c 1
    depends_on:
      - cyan-db
      - redis
    volumes:
      - ./EPA-Cyano-Web/config/secrets:/config/secrets
    environment:
      - DOCKER_HOSTNAME=${HOSTNAME}
    env_file:
      - ${CYAN_CONFIG:-./EPA-Cyano-Web/config/.env}

  # Cyanweb MySQL DB
  cyan-db:
    restart: unless-stopped
    image: ghcr.io/usepa/cyanweb-db:dev
    volumes:
      - /var/www/app_data/cyano:/var/lib/mysql
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
    env_file:
      - ${CYAN_CONFIG:-./EPA-Cyano-Web/config/.env}
